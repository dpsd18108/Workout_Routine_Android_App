package com.example.workout;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

public class ActivityDistance extends AppCompatActivity implements SensorEventListener {

    private SensorManager sensorManager;
    private Sensor accelerometer;
    private TextView distanceTextView;

    private float[] previousAcceleration;
    private long previousTimestamp;
    private double totalDistance;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_distance);

        distanceTextView = findViewById(R.id.distanceTextView);

        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);

        previousAcceleration = new float[3];
        previousTimestamp = 0;
        totalDistance = 0.0;
    }

    @Override
    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            float[] currentAcceleration = event.values;
            long currentTimestamp = event.timestamp;

            if (previousTimestamp != 0) {
                float deltaTime = (currentTimestamp - previousTimestamp) * 1e-9f; // Convert nanoseconds to seconds

                // Calculate the acceleration difference
                float accelerationDifference = calculateAccelerationDifference(previousAcceleration, currentAcceleration);

                // Estimate the velocity using the trapezoidal rule
                double velocity = (accelerationDifference * deltaTime) / 2.0;

                // Estimate the distance using the trapezoidal rule
                double distance = velocity * deltaTime;

                // Update the total distance
                totalDistance += distance;

                // Update the TextView
                distanceTextView.setText(String.format("Total Distance: %.2f meters", totalDistance));
            }

            previousAcceleration = currentAcceleration;
            previousTimestamp = currentTimestamp;
        }
    }

    private float calculateAccelerationDifference(float[] previousAcceleration, float[] currentAcceleration) {
        float dx = currentAcceleration[0] - previousAcceleration[0];
        float dy = currentAcceleration[1] - previousAcceleration[1];
        float dz = currentAcceleration[2] - previousAcceleration[2];
        return (float) Math.sqrt(dx * dx + dy * dy + dz * dz);
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        // Do nothing
    }
}
